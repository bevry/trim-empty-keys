/* eslint no-void:0 */
import { deepEqual } from 'assert-helpers'
import kava from 'kava'

import { trimEmptyKeys, trimNullishKeys, trimFalseyKeys } from './index.js'

kava.suite('trim-empty-keys', function (suite, test) {
	test('empty', function () {
		deepEqual(
			trimEmptyKeys({
				_undefined: void 0,
				_null: null,
				number: 1,
				_number: 0,
				bool: true,
				_bool: false,
				string: ' ',
				_string: '',
				array: [1],
				_array: [],
				set: new Set([1]),
				_set: new Set(),
				map: new Map([['a', 1]]),
				_map: new Map(),
				object: {
					_undefined: void 0,
					_null: null,
					number: 1,
					_number: 0,
					bool: true,
					_bool: false,
					string: ' ',
					_string: '',
					array: [1],
					_array: [],
					set: new Set([1]),
					_set: new Set(),
					map: new Map([['a', 1]]),
					_map: new Map(),
				},
				_object: {
					_undefined: void 0,
					_null: null,
					_string: '',
					_array: [],
					_set: new Set(),
					_map: new Map(),
					_object: {},
				},
			}),
			{
				number: 1,
				_number: 0,
				bool: true,
				_bool: false,
				string: ' ',
				array: [1],
				set: new Set([1]),
				map: new Map([['a', 1]]),
				object: {
					number: 1,
					_number: 0,
					bool: true,
					_bool: false,
					string: ' ',
					array: [1],
					set: new Set([1]),
					map: new Map([['a', 1]]),
				},
			},
			'should trim empty keys',
		)
	})
	test('nullish', function () {
		deepEqual(
			trimNullishKeys({
				_undefined: void 0,
				_null: null,
				number: 1,
				_number: 0,
				bool: true,
				_bool: false,
				string: ' ',
				_string: '',
				array: [1],
				_array: [],
				set: new Set([1]),
				_set: new Set(),
				map: new Map([['a', 1]]),
				_map: new Map(),
				object: {
					_undefined: void 0,
					_null: null,
					number: 1,
					_number: 0,
					bool: true,
					_bool: false,
					string: ' ',
					_string: '',
					array: [1],
					_array: [],
					set: new Set([1]),
					_set: new Set(),
					map: new Map([['a', 1]]),
					_map: new Map(),
					_object: {},
				},
				_object: {
					_undefined: void 0,
					_null: null,
				},
			}),
			{
				number: 1,
				_number: 0,
				bool: true,
				_bool: false,
				string: ' ',
				_string: '',
				array: [1],
				_array: [],
				set: new Set([1]),
				_set: new Set(),
				map: new Map([['a', 1]]),
				_map: new Map(),
				object: {
					number: 1,
					_number: 0,
					bool: true,
					_bool: false,
					string: ' ',
					_string: '',
					array: [1],
					_array: [],
					set: new Set([1]),
					_set: new Set(),
					map: new Map([['a', 1]]),
					_map: new Map(),
				},
			},
			'should trim nullish keys',
		)
	})
	test('falsey', function () {
		deepEqual(
			trimFalseyKeys({
				_undefined: void 0,
				_null: null,
				number: 1,
				_number: 0,
				bool: true,
				_bool: false,
				string: ' ',
				_string: '',
				array: [1],
				_array: [],
				set: new Set([1]),
				_set: new Set(),
				map: new Map([['a', 1]]),
				_map: new Map(),
				object: {
					_undefined: void 0,
					_null: null,
					number: 1,
					_number: 0,
					bool: true,
					_bool: false,
					string: ' ',
					_string: '',
					array: [1],
					_array: [],
					set: new Set([1]),
					_set: new Set(),
					map: new Map([['a', 1]]),
					_map: new Map(),
					_object: {},
				},
				_object: {
					_undefined: void 0,
					_null: null,
					_number: 0,
					_bool: false,
					_string: '',
					_object: {},
				},
			}),
			{
				number: 1,
				bool: true,
				string: ' ',
				array: [1],
				_array: [],
				set: new Set([1]),
				_set: new Set(),
				map: new Map([['a', 1]]),
				_map: new Map(),
				object: {
					number: 1,
					bool: true,
					string: ' ',
					array: [1],
					_array: [],
					set: new Set([1]),
					_set: new Set(),
					map: new Map([['a', 1]]),
					_map: new Map(),
				},
			},
			'should trim falsey keys',
		)
	})
})
